import os
import cv2
import numpy as np
import time

video_path = "Path_of_the_video"
output_dir = "Path_of_the_frmaes_to_save"
time_interval = 0.015
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

cap = cv2.VideoCapture(video_path)

ret, frame1 = cap.read()
if not ret:
    print("Failed to read the video")
    cap.release()
    cv2.destroyAllWindows()
    exit()

gray1 = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
gray1 = cv2.GaussianBlur(gray1, (21, 21), 0)

frame_number = 0
start_time = time.time()

while cap.isOpened():
    ret, frame2 = cap.read()
    if not ret:
        break

    elapsed_time = time.time() - start_time

    if elapsed_time >= time_interval:
        gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)
        gray2 = cv2.GaussianBlur(gray2, (21, 21), 0)

        diff = cv2.absdiff(gray1, gray2)
        _, thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)

        thresh = cv2.erode(thresh, None, iterations=3)
        thresh = cv2.dilate(thresh, None, iterations=3)

        black_canvas = np.zeros_like(gray2)

        black_canvas[thresh > 0] = gray2[thresh > 0]

        motion_display = cv2.cvtColor(black_canvas, cv2.COLOR_GRAY2BGR)

        cv2.imwrite(f"{output_dir}/frame_{frame_number:04d}.png", black_canvas)

        resized_video = cv2.resize(motion_display, (800, 600))
        cv2.imshow("Processed Video", resized_video)

        gray1 = gray2
        start_time = time.time()

        frame_number += 1
        print(f"frame # {frame_number}")

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    cap.release()
    cv2.destroyAllWindows()

